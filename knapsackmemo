

findKanpsac(int[] wt,int[] value, int W, int n) {

int t[][] = t[n+1][W+1];

for (int i =0;i<n+1;i++){
for (int j=0;j<W+1;j++) {
    t[n][w] =-1;
    }
}

knapsack (t,wt,val,W,n);

int knapsack(int[] t[],int[] wt,int [] val,int W,int n) {

if (W==0 ||  n==0) {
     return 0;
     }
  if (t[n][W] !=-1) {
      return t[n][W];
      }
  if (wt[n-1]<W> {
      t[n][w]= Math.max(val[n-1]+knapsack(t,wt,val,W-wt[n-1],n-1),knapsacl(t,wt,val,W,n-1));
      }else {
       t[n][w]= knapsacl(t,wt,val,W,n-1);
       }
       return t[n][W];
       }
